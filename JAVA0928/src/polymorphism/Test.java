package polymorphism;

public class Test {

	public static void main(String[] args) {
		// 레퍼런스 형변환 연습
		// 서브클래스 타입(스마트폰) 인스턴스 생성
		스마트폰 내폰 = new 스마트폰();
		
		// 서브클래스 타입으로 참조 가능한 메서드 : 3개
		내폰.문자();
		내폰.전화();
		내폰.카톡();
		
		System.out.println("=================================");
		
		// 슈퍼클래스 타입(핸드폰) 인스턴스 생성
		핸드폰 어머니폰 = new 핸드폰();
		// 슈퍼클래스 타입으로 참조 가능한 메서드 : 2개
		어머니폰.문자();
		어머니폰.전화();
		
		System.out.println("=================================");
		
		// 업캐스팅 예)
		// 내가 쓰던 스마트폰 > 어머니께 드릴 경우
		// 스마트폰(서브) > 핸드폰(슈퍼) 타입으로 변환하는 경우
		어머니폰 = 내폰; // 자동 형변환 가능
		// 어머니가 사용가능한 기능 : 2개 (기능이 축소됨)
		어머니폰.문자();
		어머니폰.전화();
//		어머니폰.카톡(); // 사용 불가!
		
		// 또 다른 스마트폰(동생폰)을 어머니께 드릴 경우
		스마트폰 동생폰 = new 스마트폰();
		// 어머니가 사용가능한 기능 : 2개 (기능이 축소됨)
		어머니폰 = 동생폰;
		어머니폰.문자();
		어머니폰.전화();
//		어머니폰.카톡(); // 사용 불가!
		
		// 어머니폰(핸드폰 타입)으로 여러 스마트폰을 사용할 수 있다.
		// 내폰, 동생폰 등
		
		System.out.println("=================================");
		
		// 다운캐스팅 성공적으로 수행되는 예)
		어머니폰 = new 스마트폰(); // 스마트폰 > 핸드폰 업캐스팅
		내폰 = (스마트폰)어머니폰;
		// 내가 사용가능한 기능 : 3개 (기능이 확대됨)
		// 업캐스팅 후 다운캐스팅이 이루어진 경우 = 안전하다!
		내폰.카톡();
		내폰.문자();
		내폰.전화();

	}

}

// 전화기 클래스
// 전화() 메서드 정의 : "전화 걸기!" 출력, 리턴타입/매개변수 없음

// 전화기 클래스 상속받는 핸드폰 클래스 정의
// 문자() 메서드 정의 : "문자 전송!" 출력, 리턴타입/매개변수 없음

// 핸드폰 클래스 상속받는 스마트폰 클래스 정의
// 카톡() 메서드 정의 : "카톡 전송!" 출력, 리턴타입/매개변수 없음


class 전화기 {
	
	public void 전화()	{
		System.out.println("전화 걸기!");
	}
	
}

class 핸드폰 extends 전화기 {

	public void 문자() {
		System.out.println("문자 전송!");
	}
	
	
}

class 스마트폰 extends 핸드폰 {
	
	public void 카톡() {
		System.out.println("카톡 전송!");
	}
}