package method;

public class Ex3 {

	public static void main(String[] args) {
		// 3. 전달인자만 있고, 리턴값은 없는 메서드 호출
		System.out.println("동생아! 200원 줄테니 과자 사먹어라!");
		// 전달인자가 있으므로 메서드 호출 시 소괄호()안에 전달할 데이터 기술
		// -> 리터럴을 직접 전달하거나, 변수 값을 통해 전달 가능
//		sister_3(200); // sister_3() 메서드 호출 시 전달인자로 정수 리터럴 200전달
		// 만약, 메서드 선언부에 전달인자를 저장할 매개변수가 없을 경우 오류 발생!
		
		// 변수를 선언하여 전달인자로 사용될 데이터를 저장한 후 변수를 전달해도 동일함
		int m = 500;
		sister_3(m);
		
		System.out.println("============================================");
		//------------------------------------------------------------------
		// 전달인자가 복수개인 메서드 호출
		System.out.println("동생아! 연필하고 공책을 줄테니 공부해라!");
		sister_3_2("연필", "공책"); 
		
		
	} // main()메서드 호출
	
	// 3. 전달인자만 있고, 리턴값은 없는 메서드 정의
	// -> 리턴값이 없으므로 리턴타입에 void 명시(생략 불가)
	// -> 전달인자가 있으므로 전달받은 데이터의 타입과 일치하는 
	//    변수(=매개변수) 선언 필수
	
	public static void sister_3(int money) { 
		// 외부로부터 메서드 호출 시 정수 200을 전달받아 매개변수 money에 저장하므로
		// int money = 200과 동일한 코드로 취급됨
		
		System.out.println("동생 : 언니가 과자 사먹으라고 " + money + "원을 줬다!");
		
		money -= 200;
		System.out.println("동생 : 아이스크림 사먹고 " + money + "원이 남았다!");
//--------------------------------------------------------------------------------		
//		return; 
		// 
		if(money < 200) {
			System.out.println("잔돈이 200원 미만이므로 메서드 종료!");
			return;
		}
		
		System.out.println("동생 : 잔돈이 많이 남았으니 과자를 더 사먹자!");
		
	} // sister_3() 메서드 끝
	
	//=======================================================================
	// 전달인자가 복수개인 메서드 정의
	// -> 전달되는 데이터의 순서와 타입에 맞게 메서드의 매개변수 선언
	
	public static void sister_3_2(String item1, String item2) {
		System.out.println("언니가 준 첫번째 아이템 : " + item1);
		System.out.println("언니가 준 첫번째 아이템 : " + item2);
		
	} // sister_3_2() 메서드 끝

	
	
}// Ex3 클래스 끝
